#!/bin/bash
#
# Creates a C header file containing code for mapping from port number and
# mux setting to a string giving the name of the peripheral signal using
# that port.  This is done by scanning a file in the include/pio/ folder.
# For more details, see mkAllPortMux.sh in this folder.

date_time=$(date '+%Y%m%d_%H%M%S_%N' )
file_root=/tmp/portmux_${date_time}
file_tmp1=${file_root}_tmp1
file_awk1=${file_root}_awk1

cat > "${file_awk1}" <<"EOF1"
BEGIN            {
                   cpu_model = "undefined";
                   
                   pgrp_offset["A"] = 0;
                   pgrp_offset["B"] = 32;
                   pgrp_offset["C"] = 64;
                   pgrp_offset["D"] = 96;
                   
                   mux_offset = "ABCDEFGHIJKLMNOP";
                   
                   max_port_seen = 0;
                 }
/define.*_PIO_$/ {
                   cpu_model = $2;
                   sub(/PIO_/, "", cpu_model);
                   ifdef_tag = cpu_model "PORTMUX_";
                   
                   printf("/*\n");
                   printf(" * DO NOT EDIT!  This file was automatically generated by mkPortMux.sh\n");
                   printf(" * %s\n", strftime("%F %T %Z"));
                   printf(" *\n");
                   printf(" * SAMD51 specific file to map from a port and mux number\n");
                   printf(" * to the peripheral function configured to use that port.\n");
                   printf(" */\n\n");
                   printf("#ifdef %s\n", cpu_model);
                   printf("#ifndef %s\n", ifdef_tag);
                   printf("#define %s\n", ifdef_tag);
                 }
/PINMUX_/        {
                   word1 = $2;
                   sub(/PINMUX_/, "", word1);
                   pgrp  = substr(word1, 2, 1);
                   pnum  = substr(word1, 3, 2);
                   mux   = substr(word1, 5, 1);
                   pfunc = substr(word1, 7);
                   
                   pinnum = (pnum + 0) + pgrp_offset[pgrp];
                   muxnum = index(mux_offset, mux) - 1;
                   pinmuxndx = pinnum * 16 + muxnum;
                   pinmuxuser[pinmuxndx] = pfunc;

                   if (max_port_seen < pinnum) {
                     max_port_seen = pinnum;
                   }

                   if (!(pfunc in func_names)) {
                     func_names[pfunc] = length(func_names);
                     # printf("added %s=%d to func_names\n", pfunc, func_names[pfunc]);
                   }

                   # printf("word1=%-24s pnum=%2d pgrp=%s pinnum=%2d mux=%s muxnum=%2d pfunc=%s\n", word1, pnum, pgrp, pinnum, mux, muxnum, pfunc);
                 }
END              {
                   # emit the function names array
                   num_func_names = asorti(func_names, func_names_sorted);
                   func_names["undefined"] = 0;
                   printf("\nconst uint16_t numPortUserNames = %d;\n", num_func_names + 1);
                   printf("const char* portUserNames[numPortUserNames] = {\n    \"undefined\", ");
                   names_per_line = 10;
                   n = 1;
                   for (ndx in func_names_sorted) {
                     fname = func_names_sorted[ndx];
                     func_names[fname] = ndx;
                     # printf("ndx=%d  fname=%s\n", ndx, fname);
                     printf("\"%s\", ", fname);
                     n += 1;
                     if (n >= names_per_line) {
                       printf("\n    ");
                       n = 0;
                     }
                   }
                   if (n > 0) {
                     printf("\n");
                   }
                   printf("};\n\n");

                   # emit the map from (port, mux) to user_name
                   printf("const uint16_t numPorts = PORT_GROUPS * 32;\n");
                   printf("const uint16_t numMux   = 16;\n");
                   printf("const uint16_t numPortMuxUserMap = numPorts * numMux;\n\n");
                   printf("const uint16_t portMuxUserMap[numPortMuxUserMap] = {\n");
                   
                   max_ports = 64;
                   if (max_port_seen > 96) max_ports = 128;
                   if (max_port_seen > 64) max_ports = 96;
                   max_mux = 16;
                   
                   for (nport = 0; nport < max_ports; nport++) {
                     printf("  ");
                     for (nmux = 0; nmux < max_mux; nmux++) {
                       pinmuxndx = nport * 16 + nmux;
                       fname = "";
                       userndx = 0;
                       if (pinmuxndx in pinmuxuser) {
                         fname = pinmuxuser[pinmuxndx];
                         userndx = func_names[fname];
                       }
                       # printf("nport=%d  nmux=%d  pinmuxndx=%d  userndx=%d  fname=%s\n", nport, nmux, pinmuxndx, userndx, fname);
                       printf("%5d,", userndx);
                     }
                     printf("\n");
                   }
                   printf("};\n\n");

                   printf("const char* getPortMuxUserName(uint16_t portNum, uint16_t muxNum) {\n");
                   printf("  return portUserNames[portMuxUserMap[portNum * 16 + muxNum]];\n");
                   printf("}\n\n");
                   
                   printf("#endif // %s\n", ifdef_tag);
                   printf("#endif // %s\n", cpu_model);
                 }
EOF1

awk -f "${file_awk1}" "$1" > "${file_tmp1}"

cat "${file_tmp1}"
